const { readFile, writeFile } = require('fs').promises;
const { resolve } = require('path');
const { inspect } = require('util');
const { kebabCase } = require('lodash');
const { rem, em } = require('polished');

const inDir = process.argv[2].split('=')[1];
const outDir = process.argv[3].split('=')[1];
const tokensPath = resolve(__dirname, inDir);
const themePath = resolve(__dirname, outDir);

const generateTokens = async () => {
  try {
    const data = await readFile(`${tokensPath}/tokens.json`, 'utf8');
    const tokens = JSON.parse(data);

    const colors = Object.entries(tokens.color).reduce(
      (acc, [key, obj]) => ({
        ...acc,
        [kebabCase(key)]:
          'value' in obj
            ? obj.value
            : Object.entries(obj).reduce(
                (nestedAcc, [nestedKey, nestedObj]) => ({
                  ...nestedAcc,
                  [kebabCase(nestedKey)]: nestedObj.value,
                }),
                {},
              ),
      }),
      {},
    );

    const breakpoints = Object.entries(tokens.breakpoints).reduce(
      (acc, [key, obj]) => ({
        ...acc,
        [key]: key === 'base' ? em(0) : em(obj.value),
      }),
      {},
    );

    const space = Object.entries(tokens.spacing).reduce(
      (acc, [key, obj]) => ({
        ...acc,
        [key]: rem(obj.value.bottom),
      }),
      {},
    );

    const radii = Object.entries(tokens.radii).reduce(
      (acc, [key, obj]) => ({
        ...acc,
        [kebabCase(key)]: `${rem(obj.value.topLeft)} ${rem(obj.value.topRight)} ${rem(
          obj.value.topRight,
        )} ${rem(obj.value.bottomRight)} ${rem(obj.value.bottomLeft)}`,
      }),
      {},
    );

    const responsiveKeys = Object.keys(tokens.font);
    const textStyles = Object.entries(tokens.font['base']).reduce(
      (acc, [key, _]) => ({
        ...acc,
        [key]: {
          fontFamily: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: tokens.font[nestedKey][key].value.fontFamily,
            }),
            {},
          ),
          fontSize: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: rem(tokens.font[nestedKey][key].value.fontSize),
            }),
            {},
          ),
          fontWeight: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: tokens.font[nestedKey][key].value.fontWeight,
            }),
            {},
          ),
          lineHeight: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]:
                tokens.font[nestedKey][key].value.lineHeight /
                tokens.font[nestedKey][key].value.fontSize,
            }),
            {},
          ),
          letterSpacing: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: em(tokens.font[nestedKey][key].value.letterSpacing),
            }),
            {},
          ),
          textTransform: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: tokens.font[nestedKey][key].value.textCase,
            }),
            {},
          ),
          fontStyle: responsiveKeys.reduce(
            (nestedAcc, nestedKey) => ({
              ...nestedAcc,
              [nestedKey]: tokens.font[nestedKey][key].value.fontStyle,
            }),
            {},
          ),
        },
      }),
      {},
    );

    const promises = [];

    if (colors) {
      promises.push(
        writeFile(
          `${themePath}/colors.ts`,
          `// DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ChakraTheme } from '@chakra-ui/react';
        export const colors: ChakraTheme['colors']  = ${inspect(colors, false, 2, false)}`,
        ).then(() => console.log('Successfully converted color design tokens!')),
      );
    }

    if (breakpoints) {
      promises.push(
        writeFile(
          `${themePath}/breakpoints.ts`,
          `
        // DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ChakraTheme } from '@chakra-ui/react';
        export const breakpoints: ChakraTheme['breakpoints']  = ${inspect(
          breakpoints,
          false,
          2,
          false,
        )}`,
        ).then(() => console.log('Successfully converted breakpoints design tokens!')),
      );
    }

    if (space) {
      promises.push(
        writeFile(
          `${themePath}/space.ts`,
          `
        // DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ChakraTheme } from '@chakra-ui/react';
        export const space: ChakraTheme['space']  = ${inspect(space, false, 2, false)}`,
        ).then(() => console.log('Successfully converted spacing design tokens!')),
      );
    }

    if (radii) {
      promises.push(
        writeFile(
          `${themePath}/radii.ts`,
          `
        // DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ChakraTheme } from '@chakra-ui/react';
        export const radii: ChakraTheme['radii']  = ${inspect(radii, false, 2, false)}`,
        ).then(() => console.log('Successfully converted radii design tokens!')),
      );
    }

    if (textStyles) {
      promises.push(
        writeFile(
          `${themePath}/textStyles.ts`,
          `
        // DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ChakraTheme } from '@chakra-ui/react';
        export const textStyles: ChakraTheme['textStyles']  = ${inspect(
          textStyles,
          false,
          2,
          false,
        )}`,
        ).then(() => console.log('Successfully converted font design tokens!')),
      );

      promises.push(
        writeFile(
          `${themePath}/components/heading.ts`,
          `
        // DO NOT MAKE CHANGES TO THIS FILE BY HAND
        // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
        import { ComponentStyleConfig } from '@chakra-ui/react';
        export const heading: ComponentStyleConfig  = {
          sizes: ${inspect(textStyles, false, 2, false)}
        }`,
        ).then(() => console.log('Successfully converted font design tokens!')),
      );
    }

    await Promise.all(promises);
  } catch (err) {
    console.log(`Whoops... Something went wrong with reading the JSON file: ${err}`);
  }
};

generateTokens();
