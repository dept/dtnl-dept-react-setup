const fs = require('fs');
const path = require('path');
const util = require('util');

const inDir = process.argv[2].split('=')[1];
const outDir = process.argv[3].split('=')[1];
const tokensPath = path.resolve(__dirname, inDir);
const themePath = path.resolve(__dirname, outDir);

fs.readFile(`${tokensPath}/tokens.json`, 'utf8', (err, data) => {
  if (err) return console.log(`Whoops... Something went wrong with reading the JSON file: ${err}`);

  const tokens = JSON.parse(data);
  const colors = Object.entries(tokens.color).reduce(
    (acc, [key, obj]) => ({
      ...acc,
      [key.split(' ').join('-').toLocaleLowerCase()]:
        'value' in obj
          ? obj.value
          : Object.entries(obj).reduce(
              (nestedAcc, [nestedKey, nestedObj]) => ({
                ...nestedAcc,
                [nestedKey.split(' ').join('-').toLocaleLowerCase()]: nestedObj.value,
              }),
              {},
            ),
    }),
    {},
  );

  const breakpoints = Object.entries(tokens.breakpoints).reduce(
    (acc, [key, obj]) => ({
      ...acc,
      [key]: `${key === 'base' ? 0 : obj.value / 16}em`,
    }),
    {},
  );

  const space = Object.entries(tokens.spacing).reduce(
    (acc, [key, obj]) => ({
      ...acc,
      [key]: `${obj.value.bottom / 16}rem`,
    }),
    {},
  );

  const radii = Object.entries(tokens.radii).reduce(
    (acc, [key, obj]) => ({
      ...acc,
      [`${key}`]: `${obj.value.topLeft / 16}rem`,
    }),
    {},
  );

  const responsiveKeys = Object.keys(tokens.font);
  const textStyles = Object.entries(tokens.font['base']).reduce(
    (acc, [key, _]) => ({
      ...acc,
      [key]: {
        fontFamily: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]: tokens.font[nestedKey][key].value.fontFamily,
          }),
          {},
        ),
        fontSize: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]: `${tokens.font[nestedKey][key].value.fontSize / 16}rem`,
          }),
          {},
        ),
        fontWeight: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]: tokens.font[nestedKey][key].value.fontWeight,
          }),
          {},
        ),
        lineHeight: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]:
              tokens.font[nestedKey][key].value.lineHeight /
              tokens.font[nestedKey][key].value.fontSize,
          }),
          {},
        ),
        letterSpacing: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]: tokens.font[nestedKey][key].value.letterSpacing,
          }),
          {},
        ),
        textTransform: responsiveKeys.reduce(
          (nestedAcc, nestedKey) => ({
            ...nestedAcc,
            [nestedKey]: tokens.font[nestedKey][key].value.textCase,
          }),
          {},
        ),
      },
    }),
    {},
  );

  if (colors) {
    fs.writeFile(
      `${themePath}/colors.ts`,
      `// DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ChakraTheme } from '@chakra-ui/react';
      export const colors: ChakraTheme['colors']  = ${util.inspect(colors, false, 2, false)}`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generating the colors: ${err}`
            : 'Successfully converted color design tokens!',
        );
      },
    );
  }

  if (breakpoints) {
    fs.writeFile(
      `${themePath}/breakpoints.ts`,
      `
      // DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ChakraTheme } from '@chakra-ui/react';
      export const breakpoints: ChakraTheme['breakpoints']  = ${util.inspect(
        breakpoints,
        false,
        2,
        false,
      )}`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generating the breakpoints: ${err}`
            : 'Successfully converted breakpoints design tokens!',
        );
      },
    );
  }

  if (space) {
    fs.writeFile(
      `${themePath}/space.ts`,
      `
      // DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ChakraTheme } from '@chakra-ui/react';
      export const space: ChakraTheme['space']  = ${util.inspect(space, false, 2, false)}`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generating the spacing: ${err}`
            : 'Successfully converted spacing design tokens!',
        );
      },
    );
  }

  if (radii) {
    fs.writeFile(
      `${themePath}/radii.ts`,
      `
      // DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ChakraTheme } from '@chakra-ui/react';
      export const radii: ChakraTheme['radii']  = ${util.inspect(radii, false, 2, false)}`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generating the radii: ${err}`
            : 'Successfully converted radii design tokens!',
        );
      },
    );
  }

  if (textStyles) {
    fs.writeFile(
      `${themePath}/textStyles.ts`,
      `
      // DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ChakraTheme } from '@chakra-ui/react';
      export const textStyles: ChakraTheme['textStyles']  = ${util.inspect(
        textStyles,
        false,
        2,
        false,
      )}`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generating the textStyles: ${err}`
            : 'Successfully converted font design tokens!',
        );
      },
    );

    fs.writeFile(
      `${themePath}/components/heading.ts`,
      `
      // DO NOT MAKE CHANGES TO THIS FILE BY HAND
      // THIS FILE IS AUTOMATICALLY GENERATED BY THE YARN THEME COMMAND
      import { ComponentStyleConfig } from '@chakra-ui/react';
      export const heading: ComponentStyleConfig  = {
        sizes: ${util.inspect(textStyles, false, 2, false)}
      }`,
      err => {
        console.log(
          err
            ? `Whoops... Something went wrong with generation of heading sizes: ${err}`
            : 'Successfully converted font design tokens!',
        );
      },
    );
  }
});
